# -*- coding: utf-8 -*-
"""Sia Level2_train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Ai7KeEtAt0X2z7MqKpksEQuApxY1Egz

### 수강생분의 이름, 학번을 반영해주세요.
"""

id = '20191769'
name = '김지수'
print(id, name)

"""###필요 모듈 설치"""

#!pip uninstall -y segmentation-models-pytorch
!pip install pretrainedmodels==0.7.4
!pip install efficientnet_pytorch==0.6.3
!pip install timm==0.4.12
!pip install -U git+https://github.com/albu/albumentations --no-cache-dir

import os
import numpy as np
import cv2

import glob
import json
from PIL import Image
import random
import torch
import matplotlib.pyplot as plt
from skimage.io import imread

seed = 719
random.seed(seed)
os.environ['PYTHONHASHSEED'] = str(seed)
np.random.seed(seed)
torch.manual_seed(seed)
torch.cuda.manual_seed(seed)

from google.colab import drive
drive.mount('/gdrive')

workspace_path = '/gdrive/My Drive/AIproject/data/LV2_dataset'
segmentation_path = '/gdrive/My Drive/AIproject/data/segmentation_models'

import sys
sys.path.append(segmentation_path)  # segmentation 소스코드 경로 설정

train_path = os.path.join(workspace_path, 'training_set')
img_train_dir = os.path.join(train_path, 'images')
blabel_train_dir = os.path.join(train_path, 'labels/building')
rlabel_train_dir = os.path.join(train_path, 'labels/road')

valid_path = os.path.join(workspace_path, 'validation_set')
img_valid_dir = os.path.join(valid_path, 'images')
blabel_valid_dir = os.path.join(valid_path, 'labels/building')
rlabel_valid_dir = os.path.join(valid_path, 'labels/road')

blabel_train_list = os.listdir(blabel_train_dir)
rlabel_train_list = os.listdir(rlabel_train_dir)

blabel_valid_list = os.listdir(blabel_valid_dir)
rlabel_valid_list = os.listdir(rlabel_valid_dir)

a = os.listdir(img_train_dir)
print(len(a))

build_road_train = list(set(blabel_train_list).intersection(rlabel_train_list))

build_road_valid = list(set(blabel_valid_list).intersection(rlabel_valid_list))

len(build_road_train)

len(build_road_valid)

"""###json에서 이미지 그리기"""

new_train_label = '/gdrive/My Drive/AIproject/data/LV2_dataset/training_set/labels/both/'
new_valid_label = '/gdrive/My Drive/AIproject/data/LV2_dataset/validation_set/labels/both/'

def split(list, n):
  return[list[i: i+n] for i in range(0, len(list), n)]

from pathlib import Path
from os import path

def train_parse_json():
  json_list = build_road_train

  for json_name in build_road_train:
    print(json_name)

    with open(os.path.join(blabel_train_dir, json_name),"r") as b, open(os.path.join(rlabel_train_dir, json_name), "r") as r:
       mask = np.zeros((1024, 1024,3), np.uint8)
       b_data = json.load(b)
       r_data = json.load(r)
       
       for b_feature in b_data['features']:
         b_imcoords = b_feature['properties']['building_imcoords']

         if b_imcoords == "":
           continue

         b_imcoords = b_imcoords.split(",")
         b_split = split(b_imcoords, 2)

         b_polygon = np.array(b_split)
         b_polygon = np.array(b_polygon, np.float64)
         b_polygon = np.array(b_polygon, np.int32)

         mask1 = cv2.fillPoly(mask, np.int32([b_polygon]), color = (213, 213,213))


       for r_feature in r_data['features']:
         r_imcoords = r_feature['properties']['road_imcoords']

         if r_imcoords == "":
           continue

         r_imcoords = r_imcoords.split(",")
         r_split = split(r_imcoords, 2)

         r_polygon = np.array(r_split)
         r_polygon = np.array(r_polygon, np.float64)
         r_polygon = np.array(r_polygon, np.int32)
         
         mask2 = cv2.fillPoly(mask1, np.int32([r_polygon]), color = (255,255,255))


       plt.imshow(mask2)
       plt.show()
       new_train_label = '/gdrive/My Drive/AIproject/data/LV2_dataset/training_set/labels/both/'
       plt.imsave(os.path.join(new_train_label, Path(json_name).stem + '.png'), mask2)

train_parse_json()

a=os.listdir(new_train_label)
len(a)

def valid_parse_json():
  json_list = build_road_valid

  for json_name in build_road_valid:
    print(json_name)

    with open(os.path.join(blabel_valid_dir, json_name),"r") as b, open(os.path.join(rlabel_valid_dir, json_name), "r") as r:
       mask = np.zeros((1024, 1024,3), np.uint8)
       b_data = json.load(b)
       r_data = json.load(r)
       
       for b_feature in b_data['features']:
         b_imcoords = b_feature['properties']['building_imcoords']

         if b_imcoords == "":
           continue

         b_imcoords = b_imcoords.split(",")
         b_split = split(b_imcoords, 2)

         b_polygon = np.array(b_split)
         b_polygon = np.array(b_polygon, np.float64)
         b_polygon = np.array(b_polygon, np.int32)

         mask1 = cv2.fillPoly(mask, np.int32([b_polygon]), color = (213, 213,213))


       for r_feature in r_data['features']:
         r_imcoords = r_feature['properties']['road_imcoords']

         if r_imcoords == "":
           continue

         r_imcoords = r_imcoords.split(",")
         r_split = split(r_imcoords, 2)

         r_polygon = np.array(r_split)
         r_polygon = np.array(r_polygon, np.float64)
         r_polygon = np.array(r_polygon, np.int32)
         
         mask2 = cv2.fillPoly(mask1, np.int32([r_polygon]), color = (255,255,255))


       plt.imshow(mask2)
       plt.show()
       new_valid_label = '/gdrive/My Drive/AIproject/data/LV2_dataset/validation_set/labels/both/'
       plt.imsave(os.path.join(new_valid_label, Path(json_name).stem + '.png'), mask2)

valid_parse_json()

b=os.listdir(new_valid_label)
len(b)

# helper function for data visualization
def visualize(**images):
    """PLot images in one row."""
    n = len(images)
    plt.figure(figsize=(16, 5))
    for i, (name, image) in enumerate(images.items()):
        plt.subplot(1, n, i + 1)
        plt.xticks([])
        plt.yticks([])
        plt.title(' '.join(name.split('_')).title())
        plt.imshow(image)
    plt.show()

"""## 데이터로더 정의"""

from torch.utils.data import DataLoader
from torch.utils.data import Dataset as BaseDataset

class Dataset(BaseDataset):
    """CamVid Dataset. Read images, apply augmentation and preprocessing transformations.
    
    Args:
        images_dir (str): path to images folder
        masks_dir (str): path to segmentation masks folder
        class_values (list): values of classes to extract from segmentation mask
        augmentation (albumentations.Compose): data transfromation pipeline 
            (e.g. flip, scale, etc.)
        preprocessing (albumentations.Compose): data preprocessing 
            (e.g. noralization, shape manipulation, etc.)
    
    """
    
    CLASSES = ['building', 'road']
    
    def __init__(
            self, 
            images_dir, 
            masks_dir, 
            classes=None, 
            augmentation=None, 
            preprocessing=None,
    ):
        self.ids = os.listdir(images_dir)
        self.images_fps = [os.path.join(images_dir, image_id) for image_id in self.ids]
        self.masks_fps = [os.path.join(masks_dir, image_id) for image_id in self.ids]
        
        # convert str names to class values on masks
        self.class_values = [self.CLASSES.index(cls.lower()) for cls in classes]

        for i in range(len(self.masks_fps)):
          self.mask_ids = np.unique(cv2.imread(self.masks_fps[i], 0))[1:]
          if len(self.mask_ids) == len(self.class_values):
            break
        
        self.augmentation = augmentation
        self.preprocessing = preprocessing
    
    def __getitem__(self, i):
        
        # read data
        image = cv2.imread(self.images_fps[i])
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        mask = cv2.imread(self.masks_fps[i], 0)
        
        # extract certain classes from mask (e.g. cars)
        masks = [(mask == self.mask_ids[v]) for v in self.class_values]
        mask = np.stack(masks, axis=-1).astype('float')
        
        # apply augmentations
        if self.augmentation:
            sample = self.augmentation(image=image, mask=mask)
            image, mask = sample['image'], sample['mask']
        
        # apply preprocessing
        if self.preprocessing:
            sample = self.preprocessing(image=image, mask=mask)
            image, mask = sample['image'], sample['mask']
            
        return image, mask
        
    def __len__(self):
        return len(self.ids)

# Lets look at data we have

dataset = Dataset(img_train_dir, new_train_label,  classes = ['building','road'])


image, mask = dataset[139] # get some sample


visualize(
    image=image,
    cars_mask = mask[:,:,0].squeeze(),
    build_mask = mask[:,:,1].squeeze(),
)

"""## 데이터증대

"""

import albumentations as albu

def get_training_augmentation():
    train_transform = [

        albu.HorizontalFlip(p=0.5),

        albu.ShiftScaleRotate(scale_limit=0.5, rotate_limit=0, shift_limit=0.1, p=1, border_mode=0),

        albu.PadIfNeeded(min_height=320, min_width=320, always_apply=True, border_mode=0),
        albu.RandomCrop(height=320, width=320, always_apply=True),

        albu.IAAAdditiveGaussianNoise(p=0.5),
        albu.IAAPerspective(p=0.5),

        albu.OneOf(
            [
                albu.CLAHE(p=1),
                albu.RandomBrightness(p=1),
                albu.RandomGamma(p=1),
            ],
            p=0.9,
        ),

        albu.OneOf(
            [
                albu.IAASharpen(p=1),
                albu.Blur(blur_limit=3, p=1),
                albu.MotionBlur(blur_limit=3, p=1),
            ],
            p=0.9,
        ),

        albu.OneOf(
            [
                albu.RandomContrast(p=1),
                albu.HueSaturationValue(p=1),
            ],
            p=0.9,
        ),
    ]
    return albu.Compose(train_transform)


def get_validation_augmentation():
    """Add paddings to make image shape divisible by 32"""
    test_transform = [
        albu.PadIfNeeded(384, 480)
    ]
    return albu.Compose(test_transform)


def to_tensor(x, **kwargs):
    return x.transpose(2, 0, 1).astype('float32')


def get_preprocessing(preprocessing_fn):
    """Construct preprocessing transform
    
    Args:
        preprocessing_fn (callbale): data normalization function 
            (can be specific for each pretrained neural network)
    Return:
        transform: albumentations.Compose
    
    """
    
    _transform = [
        albu.Lambda(image=preprocessing_fn),
        albu.Lambda(image=to_tensor, mask=to_tensor),
    ]
    return albu.Compose(_transform)

augmented_dataset = Dataset(
    img_train_dir, 
    new_train_label, 
    augmentation=get_training_augmentation(), 
    classes=['building','road'],
)

# same image with different random transforms
for i in range(4):
    image, mask = augmented_dataset[99]
    visualize(
    image=image, 
    cars_mask = mask[:,:,0].squeeze(),
    buildmask= mask[:,:,1].squeeze(),
)

"""###모델 생성 및 훈련"""

import torch
import numpy as np
import segmentation_models_pytorch as smp

ENCODER = 'se_resnext50_32x4d'
ENCODER_WEIGHTS = 'imagenet'
CLASSES = ['building','road']
ACTIVATION = 'sigmoid' # could be None for logits or 'softmax2d' for multiclass segmentation
DEVICE = 'cuda'

# create segmentation model with pretrained encoder
model = smp.Unet(
    encoder_name=ENCODER, 
    encoder_weights=ENCODER_WEIGHTS, 
    classes=len(CLASSES), 
    activation=ACTIVATION,
)

preprocessing_fn = smp.encoders.get_preprocessing_fn(ENCODER, ENCODER_WEIGHTS)

train_dataset = Dataset(
    img_train_dir, 
    new_train_label, 
    augmentation=get_training_augmentation(), 
    preprocessing=get_preprocessing(preprocessing_fn),
    classes=CLASSES,
)

train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True, num_workers=2)

loss = smp.utils.losses.DiceLoss()
metrics = [
    smp.utils.metrics.IoU(threshold=0.25),
]

optimizer = torch.optim.Adam([ 
    dict(params=model.parameters(), lr=0.0001),
])

train_epoch = smp.utils.train.TrainEpoch(
    model, 
    loss=loss, 
    metrics=metrics, 
    optimizer=optimizer,
    device=DEVICE,
    verbose=True,
)

import time
max_score = 0


save_dir = os.path.join(workspace_path, 'ckpt')
os.makedirs(save_dir, exist_ok=True)

for i in range(0, 500):
    
    print('\nEpoch: {}'.format(i))
    prevTime = time.time()
  
    train_logs = train_epoch.run(train_loader)
    curTime = time.time()

    sec = curTime - prevTime
    fps = sec / 27
    print('FPS : ', fps)

    # prevTime = time.time()
    # valid_logs = valid_epoch.run(valid_loader)
    # curTime = time.time()
    # sec = curTime - prevTime
    # fps = sec / 142
    # print('FPS : ', fps)

    # do something (save model, change lr, etc.)
    if max_score < train_logs['iou_score']:
        max_score = train_logs['iou_score']
        torch.save(model, os.path.join(save_dir, 'train_model.pth'))
        print('Model saved!')
        
    if i == 55:
        optimizer.param_groups[0]['lr'] = 1e-5
        print('Decrease decoder learning rate to 1e-5!')
    # scheduler.step()
    print(max_score)

print('max_score =' + str(max_score))